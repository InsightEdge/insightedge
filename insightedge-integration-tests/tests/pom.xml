<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>insightedge-integration-tests</artifactId>
        <groupId>org.gigaspaces.insightedge</groupId>
        <version>16.3.0-PIC-1232-dev-moran-wed-228</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>tests</artifactId>

    <properties>
        <dist.edition></dist.edition>
        <dist.dir>${project.basedir}/../../insightedge-packager/target/${dist.edition}</dist.dir>
        <git.branch></git.branch>
        <test.folder></test.folder>
        <generatorPhase>package</generatorPhase>
    </properties>


    <repositories>
        <repository>
            <id>org.openspaces</id>
            <name>OpenSpaces</name>
            <url>http://maven-repository.openspaces.org</url>
        </repository>
    </repositories>



    <dependencies>
        <dependency>
            <groupId>org.gigaspaces</groupId>
            <artifactId>xap-openspaces</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.gigaspaces</groupId>
            <artifactId>xap-admin</artifactId>
            <version>${xap.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.gigaspaces</groupId>
            <artifactId>xap-asm</artifactId>
            <version>${xap.version}</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.gigaspaces.insightedge</groupId>
            <artifactId>insightedge-core</artifactId>
        </dependency>
        <!-- Scala -->
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-library</artifactId>
        </dependency>
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-reflect</artifactId>
        </dependency>
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-compiler</artifactId>
        </dependency>

        <!-- Test dependencies -->
        <dependency>
            <groupId>org.scalatest</groupId>
            <artifactId>scalatest_2.11</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.scala-lang</groupId>
                    <artifactId>scala-library</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.spotify</groupId>
            <artifactId>docker-client</artifactId>
            <version>8.14.3</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>1.7.21</version>
            <scope>test</scope>
        </dependency>
        <!-- REST client lib -->
        <dependency>
            <groupId>com.typesafe.play</groupId>
            <artifactId>play-ws_2.11</artifactId>
            <version>2.4.6</version>
        </dependency>
        <dependency>
            <groupId>com.googlecode.json-simple</groupId>
            <artifactId>json-simple</artifactId>
            <version>1.1.1</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>net.alchim31.maven</groupId>
                <artifactId>scala-maven-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <id>scala-test-compile</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>testCompile</goal>
                        </goals>
                        <configuration>
                            <testOutputDir>target/classes</testOutputDir>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.0.1</version>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <!-- here the phase you need -->
                        <phase>test-compile</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/classes</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/test/resources</directory>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.scalatest</groupId>
                <artifactId>scalatest-maven-plugin</artifactId>
                <version>1.0</version>
                <executions>
                    <execution>
                        <id>test</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <phase>integration-test</phase>
                    </execution>
                </executions>
                <configuration>
                    <argLine>-Ddist.edition=${dist.edition} -Ddist.version=${project.version} -Dgit.branch=${git.branch} -Ddist.dir=${dist.dir} -Dtest.folder=${test.folder}</argLine>
                    <reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
                    <junitxml>.</junitxml>
                    <filereports>scalatest.txt</filereports>
                    <tagsToExclude>org.insightedge.spark.utils.LongRunningTest</tagsToExclude>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.commonjava.maven.plugins</groupId>
                <artifactId>directory-maven-plugin</artifactId>
                <version>0.1</version>
                <executions>
                    <execution>
                        <id>directories</id>
                        <goals>
                            <goal>highest-basedir</goal>
                        </goals>
                        <phase>initialize</phase>
                        <configuration>
                            <property>main.basedir</property>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- This plugin builds a Docker image -->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.4.9</version>
                <executions>
                    <execution>
                        <id>build-failover-image</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                        <configuration>
                            <imageName>insightedge-test</imageName>
                            <dockerDirectory>
                                ${main.basedir}/insightedge-integration-tests/tests/src/test/resources/docker/failover
                            </dockerDirectory>
                            <buildArgs>
                                <STORAGE_SERVER>${env.STORAGE_SERVER}</STORAGE_SERVER>
                            </buildArgs>
                            <resources>
                                <resource>
                                    <targetPath>/</targetPath>
                                    <directory>${dist.dir}</directory>
                                    <include>*.zip</include>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>build-demo-mode-image</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                        <configuration>
                            <imageName>insightedge-tests-demo-mode</imageName>
                            <dockerDirectory>
                                ${main.basedir}/insightedge-integration-tests/tests/src/test/resources/docker/demo-mode
                            </dockerDirectory>
                            <buildArgs>
                                <STORAGE_SERVER>${env.STORAGE_SERVER}</STORAGE_SERVER>
                            </buildArgs>
                            <resources>
                                <resource>
                                    <targetPath>/</targetPath>
                                    <directory>${dist.dir}</directory>
                                    <include>*.zip</include>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <!--don't change the profile names, newman relies on it!-->
    <profiles>
        <!--<profile>
            <id>run-integration-tests-community</id>
            <properties>
                <dist.edition>community</dist.edition>
                <tagsToExcludes>,org.insightedge.spark.utils.PremiumOnlyTest</tagsToExcludes>
            </properties>
        </profile>-->

        <profile>
            <id>run-integration-tests-premium</id>
            <properties>
                <dist.edition>premium</dist.edition>
            </properties>
        </profile>

        <!-- when running integration tests against external already built dist -->
        <profile>
            <id>run-external</id>
            <properties>
                <generatorPhase>none</generatorPhase>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>org.gigaspaces.insightedge</groupId>
                    <artifactId>insightedge-core</artifactId>
                    <scope>system</scope>
                    <systemPath>${dist.dir}/insightedge/lib/insightedge-core.jar</systemPath>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.scalatest</groupId>
                        <artifactId>scalatest-maven-plugin</artifactId>
                        <configuration>
                            <tagsToExclude>_</tagsToExclude> <!-- Workaround to reset previous value-->
                            <argLine>-Ddist.edition=${dist.edition} -Ddist.version=${project.version} -Ddist.dir=${dist.dir} -Dgit.branch=${git.branch} -Dtest.folder=${test.folder}</argLine>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>com.spotify</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <executions>
                            <!--Don't build images, only run tests-->
                            <execution>
                                <id>build-failover-image</id>
                                <phase>none</phase>
                            </execution>
                            <execution>
                                <id>build-demo-mode-image</id>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>setup-external</id>
            <properties>
                <generatorPhase>none</generatorPhase>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>org.gigaspaces.insightedge</groupId>
                    <artifactId>insightedge-core</artifactId>
                    <scope>system</scope>
                    <systemPath>${dist.dir}/insightedge/lib/insightedge-core.jar</systemPath>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.scalatest</groupId>
                        <artifactId>scalatest-maven-plugin</artifactId>
                        <configuration>
                            <argLine>-Ddist.edition=${dist.edition} -Ddist.version=${project.version} -Ddist.dir=${dist.dir} -Dgit.branch=${git.branch} -Dtest.folder=${test.folder}</argLine>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>com.spotify</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <executions>
                            <!--Images to build-->
                            <execution>
                                <id>build-failover-image</id>
                                <phase>pre-integration-test</phase>
                            </execution>
                            <execution>
                                <id>build-demo-mode-image</id>
                                <phase>pre-integration-test</phase>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>only-long-running-test</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.scalatest</groupId>
                        <artifactId>scalatest-maven-plugin</artifactId>
                        <configuration>
                            <tagsToExclude>_</tagsToExclude> <!-- Workaround to reset previous value-->
                            <tagsToInclude>org.insightedge.spark.utils.LongRunningTest</tagsToInclude>
                            <argLine>-Ddist.edition=${dist.edition} -Ddist.version=${project.version} -Ddist.dir=${dist.dir} -Dtest.folder=${test.folder}</argLine>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>com.spotify</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <executions>
                            <!--Images to exclude -->
                            <execution>
                                <id>build-demo-mode-image</id>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- Turns off execution if no profile is specified -->
        <profile>
            <id>run-nothing</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>org.gigaspaces.insightedge</groupId>
                    <artifactId>insightedge-packager</artifactId>
                    <version>${project.version}</version>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.spotify</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>build-failover-image</id>
                                <phase>none</phase>
                            </execution>
                            <execution>
                                <id>build-demo-mode-image</id>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.scalatest</groupId>
                        <artifactId>scalatest-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>test</id>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>com.gigaspaces</groupId>
                        <artifactId>xap-build-plugin</artifactId>
                        <version>${xap.version}</version>
                        <executions>
                            <execution>
                                <phase>${generatorPhase}</phase>
                                <goals>
                                    <goal>generateByScanner</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <type>insightedge-integration</type>
                            <outputFile>${project.basedir}/../../insightedge-packager/target/ie-integration-tests.json</outputFile>
                            <scanner>com.gigaspaces.newman.testgenerator.scanner.InsightEdgeIntegrationTestsScanner</scanner>
                            <includeTests>true</includeTests>
                            <includeSources>true</includeSources>
                            <packages>
                                <package>org.insightedge.spark</package>
                            </packages>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>


</project>