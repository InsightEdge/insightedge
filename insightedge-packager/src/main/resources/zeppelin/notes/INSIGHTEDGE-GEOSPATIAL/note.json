{
  "paragraphs": [
    {
      "user": "anonymous",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1497942446665_489125233",
      "id": "20170620-100726_987592414",
      "dateCreated": "2017-06-20T10:07:26+0300",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "focus": true,
      "$$hashKey": "object:402",
      "text": "%md\n> If you see 'Interpreter binding' above, just hit `Save` without deselecting any interpreters.\n\n## Welcome to InsightEdge Geospatial API example.\n\n##### This example shows geospatial features of InsightEdge:\n* building model with geospatial location field and index\n* saving RDDs with geospatial shapes to Data Grid\n* loading dataframes with geospatial queries from Data Grid\n\n##### This is a live tutorial, you can run the code yourself. _(click `Run` button in each paragraph from top to bottom)_",
      "dateUpdated": "2017-06-20T10:07:59+0300",
      "dateFinished": "2017-06-20T10:07:59+0300",
      "dateStarted": "2017-06-20T10:07:59+0300",
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<blockquote>\n  <p>If you see &lsquo;Interpreter binding&rsquo; above, just hit <code>Save</code> without deselecting any interpreters.</p>\n</blockquote>\n<h2>Welcome to InsightEdge Geospatial API example.</h2>\n<h5>This example shows geospatial features of InsightEdge:</h5>\n<ul>\n  <li>building model with geospatial location field and index</li>\n  <li>saving RDDs with geospatial shapes to Data Grid</li>\n  <li>loading dataframes with geospatial queries from Data Grid</li>\n</ul>\n<h5>This is a live tutorial, you can run the code yourself. <em>(click <code>Run</code> button in each paragraph from top to bottom)</em></h5>\n</div>"
          }
        ]
      }
    },
    {
      "text": "%define\npackage model.v1\n\nimport org.insightedge.scala.annotation._\nimport org.openspaces.spatial.shapes._\n\nimport scala.beans.{BeanProperty, BooleanBeanProperty}\n\ncase class School(\n\n                    @BeanProperty\n                    @SpaceId(autoGenerate = true)\n                    var id: String,\n\n                    @BeanProperty\n                    var name: String,\n\n                    @BeanProperty\n                    @SpaceIndex\n                    var category: String,\n                    \n                    @BeanProperty\n                    var city: String,\n\n                    @BeanProperty\n                    var address: String,\n                    \n                    @BeanProperty\n                    var phone: String,\n                    \n                    @BeanProperty\n                    @SpaceSpatialIndex\n                    var location: Point\n\n                  ) {\n\n  def this() = this(null, null, null, null, null, null, null)\n\n}\n",
      "user": "anonymous",
      "dateUpdated": "2017-06-20T10:08:18+0300",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1497942478635_-1269364420",
      "id": "20170620-100758_1475877622",
      "dateCreated": "2017-06-20T10:07:58+0300",
      "status": "READY",
      "progressUpdateIntervalMs": 500,
      "focus": true,
      "$$hashKey": "object:467",
      "title": "School Model"
    },
    {
      "text": "%spark\nimport model.v1._\nimport org.insightedge.spark.implicits.all._\nimport org.openspaces.spatial.ShapeFactory._\n\nval home = scala.sys.env(\"I9E_HOME\")\n\nval schoolsData = spark.read.json(s\"$home/insightedge/data/montgomery_schools.json\")\nschoolsData.show()\n\nval schoolsRdd = schoolsData.rdd.map(row => new School(\n    id = null,\n    row.getAs[String](\"name\"),\n    row.getAs[String](\"category\"),\n    row.getAs[String](\"city\"),\n    row.getAs[String](\"address\"),\n    row.getAs[String](\"phone\"),\n    point(row.getAs[Double](\"longitude\"), row.getAs[Double](\"latitude\"))\n))\n\nschoolsRdd.saveToGrid()",
      "user": "anonymous",
      "dateUpdated": "2017-06-20T10:08:38+0300",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1497942500490_1532423044",
      "id": "20170620-100820_1467470122",
      "dateCreated": "2017-06-20T10:08:20+0300",
      "status": "READY",
      "progressUpdateIntervalMs": 500,
      "focus": true,
      "$$hashKey": "object:557",
      "title": "Importing Data To Data Grid"
    },
    {
      "text": "%spark\nimport org.locationtech.spatial4j.distance.DistanceUtils\nimport org.openspaces.spatial.shapes._\n\nval searchRadius = 3; // km\nval userLocation = point(-77.024470, 39.032506)\nval searchArea = circle(userLocation, DistanceUtils.KM_TO_DEG * searchRadius)\n\nval schools = spark.read.grid[School]\nval nearestSchools = schools.filter(schools(\"location\") geoWithin searchArea)\nval nearestSchoolsCount = nearestSchools.count()\n",
      "user": "anonymous",
      "dateUpdated": "2017-06-20T10:08:54+0300",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1497942518298_465529668",
      "id": "20170620-100838_1585784193",
      "dateCreated": "2017-06-20T10:08:38+0300",
      "status": "READY",
      "progressUpdateIntervalMs": 500,
      "focus": true,
      "$$hashKey": "object:619",
      "title": "Searching For Schools Near User"
    },
    {
      "text": "import org.apache.spark.sql.functions._\n\nval toDistance = udf { point:Point =>\n    val d2r = DistanceUtils.DEGREES_TO_RADIANS\n    val r2km = DistanceUtils.RADIANS_TO_DEGREES * DistanceUtils.DEG_TO_KM\n    DistanceUtils.distHaversineRAD(point.getY()*d2r, point.getX()*d2r, userLocation.getY()*d2r, userLocation.getX()*d2r) * r2km\n}\n\nnearestSchools\n    .withColumn(\"distance\", toDistance(nearestSchools(\"location\")))\n    .createOrReplaceTempView(\"nearestSchools\")\n",
      "user": "anonymous",
      "dateUpdated": "2017-06-20T10:09:12+0300",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1497942536113_1385311046",
      "id": "20170620-100856_1686994707",
      "dateCreated": "2017-06-20T10:08:56+0300",
      "status": "READY",
      "progressUpdateIntervalMs": 500,
      "focus": true,
      "$$hashKey": "object:687",
      "title": "Appending Column With Distance"
    },
    {
      "user": "anonymous",
      "config": {
        "colWidth": 12,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/sql",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1497942552608_601977610",
      "id": "20170620-100912_713463084",
      "dateCreated": "2017-06-20T10:09:12+0300",
      "status": "READY",
      "progressUpdateIntervalMs": 500,
      "focus": true,
      "$$hashKey": "object:749",
      "text": "%sql\nselect category, distance, name, city, address, phone, location\nfrom nearestSchools\nwhere category = \"${category=MIDDLE SCHOOLS,ELEMENTARY SCHOOLS|MIDDLE SCHOOLS|HIGH SCHOOLS}\"\norder by distance",
      "dateUpdated": "2017-06-20T10:09:26+0300",
      "title": "Investigating Data"
    }
  ],
  "name": "InsightEdge Geospatial API",
  "id": "INSIGHTEDGE-GEOSPATIAL",
  "angularObjects": {
    "2CKP7X6T5:shared_process": [],
    "2CN28R7JH:shared_process": []
  },
  "config": {
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {}
}